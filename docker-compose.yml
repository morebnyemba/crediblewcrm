services:
  db:
    image: postgres:15-alpine
    container_name: whatsappcrm_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - TZ=${TZ:-Africa/Harare}
      - POSTGRES_DB=${DB_NAME:-whatsapp_crm_dev}
      - POSTGRES_USER=${DB_USER:-crm_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:?Please set DB_PASSWORD in .env file}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-crm_user} -d ${DB_NAME:-whatsapp_crm_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: whatsappcrm_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_backend_app
    # Use Daphne for ASGI support (Django Channels). Migrations should be run as a separate step in a CI/CD pipeline.
    command: >
      sh -c "python manage.py migrate &&
             daphne -b 0.0.0.0 -p 8000 whatsappcrm_backend.asgi:application"
    volumes:
      - staticfiles_volume:/app/staticfiles
      - ./whatsappcrm_backend/mediafiles:/app/mediafiles
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build: ./whatsapp-crm-frontend
    container_name: whatsappcrm_frontend_app
    depends_on:
      - backend
    restart: unless-stopped
    # No ports needed as Nginx will proxy to it.

  celery_worker:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_celery_worker_io
    command: celery -A whatsappcrm_backend worker -l INFO -P eventlet -c 100 -Q celery
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  celery_worker_cpu:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_celery_worker_cpu
    command: celery -A whatsappcrm_backend worker -l INFO -P prefork -c 2 -Q cpu_intensive
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_celery_beat
    command: celery -A whatsappcrm_backend beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  nginx_proxy:
    image: nginx:1.25-alpine
    container_name: whatsappcrm_nginx_proxy
    ports:
      - "80:80"   # For Let's Encrypt challenges
      - "443:443" # For HTTPS traffic
    volumes:
      - ./nginx_proxy/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - staticfiles_volume:/srv/www/static/:ro
      - ./whatsappcrm_backend/mediafiles:/srv/www/media/:ro # Keep this for media files
      - /var/www/letsencrypt:/var/www/letsencrypt:ro
      - /etc/letsencrypt:/etc/nginx/ssl:ro
    environment: # <-- Added environment section for logging
      - TZ=${TZ:-Africa/Harare}
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  staticfiles_volume:

networks:
  default:
    name: whatsappcrm_network
